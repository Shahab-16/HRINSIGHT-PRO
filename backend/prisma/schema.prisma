//
// ------------- PRISMA CONFIG -------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ------------- ENUMS -------------
enum HRRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

//
// ------------- MODELS -------------

// ✅ Admin user (for main dashboard)
model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

// ✅ HR consultancy user (login + OTP verification)
model HRUser {
  id           Int       @id @default(autoincrement())
  name         String?
  email        String    @unique
  password     String?
  otp          String?
  otpExpiresAt DateTime?
  verified     Boolean   @default(false)
  organization String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  responses    Response[]
  testSessions TestSession[]
  invites      CandidateInvite[] // ✅ One HR can have many invites
}

// ✅ Role (e.g., “General”, “Leadership”, etc.)
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  questions    Question[]
  testSessions TestSession[]
}

// ✅ Diagnostic Questions uploaded from Excel
model Question {
  id        Int      @id @default(autoincrement())
  area      String
  text      String
  roleId    Int
  createdAt DateTime @default(now())

  role      Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  options   Option[] // maturity options (A/B/C/D)
  responses Response[] // ✅ back-relation from Response
}

// ✅ Each maturity level option for a question
model Option {
  id         Int    @id @default(autoincrement())
  questionId Int
  label      String
  text       String
  maturity   Int

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// ✅ Each test session taken by an HR
model TestSession {
  id        Int      @id @default(autoincrement())
  hrId      Int
  roleId    Int?
  startedAt DateTime @default(now())
  submitted Boolean  @default(false)

  hr        HRUser     @relation(fields: [hrId], references: [id], onDelete: Cascade)
  role      Role?      @relation(fields: [roleId], references: [id])
  responses Response[]
}

// ✅ Individual responses for each question during a session
model Response {
  id           Int      @id @default(autoincrement())
  hrId         Int
  sessionId    Int
  questionId   Int
  chosenOption String? // label of chosen option (A/B/C/D)
  score        Int? // numeric score if required
  createdAt    DateTime @default(now())

  hr       HRUser      @relation(fields: [hrId], references: [id], onDelete: Cascade)
  session  TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// ✅ Candidate invite for sending test links via email/WhatsApp
model CandidateInvite {
  id        Int      @id @default(autoincrement())
  email     String?
  phone     String?
  token     String   @unique
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  hrId      Int? // optional, link to HRUser if registered

  hr HRUser? @relation(fields: [hrId], references: [id], onDelete: Cascade)
}
